Resource - https://www.w3resource.com/mongodb-exercises/

> show dbs

sample_airbnb        52.57 MiB
sample_analytics      9.54 MiB
sample_geospatial     1.28 MiB
sample_guides        40.00 KiB
sample_mflix        109.74 MiB
sample_restaurants    6.27 MiB
sample_supplies       1.05 MiB
sample_training      47.78 MiB
sample_weatherdata    2.63 MiB

> use sample_mflix

sample_mflix > db.getCollectionNames()

[
  'sessions',
  'users',
  'movies',
  'theaters',
  'embedded_movies',
  'comments'
]

sample_mflix > db.users.find()

{
  _id: ObjectId("59b99db6cfa9a34dcd7885ba"),
  name: 'Cersei Lannister',
  email: 'lena_headey@gameofthron.es',
  password: '$2b$12$FExjgr7CLhNCa.oUsB9seub8mqcHzkJCFZ8heMc8CeIKOZfeTKP8m'
}
{
  _id: ObjectId("59b99db4cfa9a34dcd7885b7"),
  name: 'Robert Baratheon',
  email: 'mark_addy@gameofthron.es',
  password: '$2b$12$yGqxLG9LZpXA2xVDhuPnSOZd.VURVkz7wgOLY3pnO0s7u2S1ZO32y'
}

sample_mflix > use sample_airbnb

sample_airbnb > db.listingsAndReviews.find({amenities:{$in:['wifi', 'ac']}) 

sample_airbnb > db.listingsAndReviews.find({amenities:{$in:['wifi', 'ac']}) 

sample_airbnb > db.listingsAndReviews.find({amenities:{$in:['wifi', 'ac']}) 

sample_airbnb > db.listingsAndReviews.find({bedrooms:1,price:{$lt:30}})

sample_airbnb > db.listingsAndReviews.find({$or:[{bedrooms:2},{cleaning_fee:{$lt:100}}]})

sample_airbnb > db.customers.find({},{name:1})

sample_airbnb > db.customers.find({age:'29'},{name:1})

sample_airbnb > db.customers.find({name:1}).sort()

sample_airbnb > db.customers.find({name:1}).limit(1)

sample_airbnb > db.customers.find({name:1}).sort({age:20})

sample_airbnb > db.customers.find({age:{$nin:[20,29]})

sample_airbnb > db.customers.find({age:{$nin:[{name:'yash'},{name:'bash'}]}))

sample_airbnb > db.listingsAndReviews.find({host_verifications:["email"]}) // if host_verifications exact match with email

sample_airbnb > db.listingsAndReviews.find({geners:{$all:['fantasy','sci-fi']}})

sample_airbnb > db.listingsAndReviews.find({"images.medium_url":"makedeveasy"}) //fetch specific data from objects

sample_airbnb > db.listingsAndReviews.deleteOne({"_id":Object(1234567890)})

sample_airbnb > db.listingsAndReviews.deleteMany({"books":"cleancode"})

sample_airbnb > use test

test > db.customers.updateOne({name:'bash'},{$set:{status:'goo'}})

test > db.customers.updateOne({status:'goo'},{$set:{status:'good'}}) //override the existing name won't create any duplicate key and value
 
test > db.customers.updateMany({},{bucket:['goo'], page:0}) //store in the id=12345678754
 
test > db.customers.updateOne({id:Object(12345678754)},{$pull:{bucket:'goo'}}) //removing the item

test > db.customers.updateOne({id:Object(12345678754)},{$push:{bucket:'good'}}) // adding the item

test > db.customers.updateOne({id:Object(12345678754)},{$inc:{page:2}}) //increment page by 2 number

test > db.customers.updateOne({id:Object(12345678754)},{$push:{bucket:{$each:[2,3]}}}) //adding 2,3 of each bucket for each item

test > db.customers.createIndex({name:"yash"})

test > db.customers.dropIndex({name:"yash"})

test > db.customers.getIndex()

books = []
test > db.customers.find()
                    .sort({age:1})
                    .skip(0)
                    .limit(10)
                    .forEach((item)=>(books.push(item))
                    
                    
db.customers.aggregate([{$addFields:{alt:"$name"}}])

db.customers.update({},{$push:{alt1:'hi'}})

db.customers.aggregate({$match:{priority:1}},{$count:"1"})

db.customers.aggregate({$group:{_id:"$age"}}) 

db.customers.find({}).sort({amount:1})


db.customers.aggregate({$match:{priority:1}})

db.accounts.aggregate([{$addFields:{products_count:{$size:"$products"}}}]) //size of products array, counted in seperate product_count

db.accounts.aggregate([{$match:{limit:10000}},{$group:{_id:null,count:{$sum:1}}}])

db.accounts.aggregate([{$addFields:{products_count:{$size:"$products"}}},{$group:{_id:null,count:{$sum:1}}}])

db.restaurants.find({"grades.score":{$mod:[7,0]}},{restaurant_id:1,name:1,grades:1}).limit(1)

db.restaurants.find({"address.coord":{$exists:1,$type:2}}).limit(1)

db.restaurants.find({"address.street":{$exists:true}}).limit(1)

db.restaurants.find().sort({cuisine:1,borough:-1})

db.restaurants.find({"address.coord.1":{$gt:42,$lt:52}})












